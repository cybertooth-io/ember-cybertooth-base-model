{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-data-base-model","attributes":{"name":"ember-data-base-model","version":"1.0.0","navigationIndex":[{"type":"models","items":[{"id":"ember-data-base-model/models/-base","path":"models/-base","name":"Base"}]},{"type":"classes","items":[{"id":"ember-data-base-model/serializers/-base~BaseSerializer","path":"modules/ember-data-base-model/serializers/-base~BaseSerializer","name":"BaseSerializer"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"ember-data-base-model/models/-base"},{"type":"module","id":"ember-data-base-model/serializers/-base"}]}}},"included":[{"type":"class","id":"ember-data-base-model/models/-base~Base","attributes":{"name":"Base","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>This Base Model class contains the <code>createdAt</code> and <code>updatedAt</code> timestamp fields\nthe Rails provides.</p>\n<p>You should import <code>Base</code> in your model class and then make your model extend it like so:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-comment\">// app/models/some-model.js</span>\n<span class=\"hljs-keyword\">import</span> BaseModel <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-base-model/models/-base'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BaseModel.extend({\n   <span class=\"hljs-comment\">// ... your model implementation ...</span>\n});</code></pre></div>","lineNumber":10,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[{"name":"createdAt","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you have a Rails app and use timestamps in your table creation migrations, you&#39;ll have a <code>created_at</code>\nattribute on most if not all of your models.</p>\n<p>By default, this value will be set to now (e.g. <code>new Date()</code>).</p></div>","lineNumber":34,"access":"public","tags":[],"type":"Date","defaultValue":"new Date()","isStatic":false,"decorators":[]},{"name":"updatedAt","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you have a Rails app and use timestamps in your table creation migrations, you&#39;ll have a <code>updated_at</code>\nattribute on most if not all of your models.</p>\n<p>By default, this value will be set to now (e.g. <code>new Date()</code>).</p></div>","lineNumber":50,"access":"public","tags":[],"type":"Date","defaultValue":"new Date()","isStatic":false,"decorators":[]}],"methods":[{"name":"becomeDirty","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Experimental</p>\n<p>Force the model&#39;s state to dirty.</p>\n<p>You could use this function after you&#39;ve edited a model&#39;s relationships so that your Ember application\nknows that the model may need to be saved.</p></div>","lineNumber":211,"access":"public","tags":[{"name":"experimental","value":""}],"returns":{"type":"void","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"transitionToInFlight","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Experimental</p>\n<p>If you&#39;re manually saving a model, you could borrow this helper function to make sure the\nmodel is marked as dirty and it&#39;s transitioned to <code>inFlight</code>.</p>\n<p>This method depends on accessing the <code>_internalModel</code> field.</p></div>","lineNumber":229,"access":"public","tags":[{"name":"experimental","value":""}],"returns":{"type":"void","description":"","properties":[]},"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"transitionToSaved","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Experimental</p>\n<p>If you&#39;re manually saving a model, you could borrow this helper function to make sure the\nmodel is marked as saved and supplied payload is pushed into the store.</p>\n<p>This method depends on accessing the <code>_internalModel</code> field.</p></div>","lineNumber":247,"access":"public","tags":[{"name":"experimental","value":""}],"returns":{"type":"void","description":"","properties":[]},"params":[{"name":"payload","type":"object","description":"the API server payload that will be pushed into the Ember Data `store`"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"transitionToUncommitted","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Experimental</p>\n<p>If you&#39;re manually saving a model, you can borrow this helper method in your error/catch block\nto transition the model to <code>uncommitted</code> and process all of the payload errors.</p>\n<p>This method depends on accessing the <code>_internalModel</code> field.</p></div>","lineNumber":266,"access":"public","tags":[{"name":"experimental","value":""}],"returns":{"type":"void","description":"","properties":[]},"params":[{"name":"payload","type":"object","description":"the API server payload that includes the error messages that will be appended\nto the model's `errors` collection."}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[{"name":"altered?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isAltered</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":69,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isAltered` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"clean?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isClean</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":83,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isClean` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"dirty?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isDirty</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":97,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isDirty` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isAltered","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Returns <code>true</code> if the instance has been altered since creation; <code>false</code> otherwise.</p>\n<p>Has the model has been altered since creation?  Determined by comparing the <code>createdAt</code> timestamp\nagainst the <code>updatedAt</code> timestamp.</p></div>","lineNumber":111,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isClean","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the model has not had any of its attributes edited; <code>false</code> otherwise.</p>\n<p>Negation of the model&#39;s <code>hasDirtyAttributes</code> property.</p></div>","lineNumber":126,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isDirty","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the model is dirty and at least one attribute has been edited; <code>false</code> otherwise.</p>\n<p>Read-only peek at the model&#39;s <code>hasDirtyAttributes</code> property.</p></div>","lineNumber":136,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isPersisted","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the instance has been persisted to the store; <code>false</code> otherwise.</p>\n<p>Negation of the <code>isNew</code> property, meaning that the model has been persisted permanently to the store.</p></div>","lineNumber":146,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isUnaltered","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the instance is unchanged since creation; <code>false</code> otherwise.</p>\n<p>Is the model unchanged since creation?  Basically the negation of <code>isAltered</code>.</p></div>","lineNumber":156,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"new?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use Ember Data <code>isNew</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":166,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isNew` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"persisted?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isPersisted</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":180,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isPersisted` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"unaltered?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isUnaltered</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":194,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isUnaltered` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false}],"parentClassId":"Model"},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-base-model/models/-base","attributes":{"file":"ember-data-base-model/models/-base","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-data-base-model/models/-base~Base"}]},"components":{"data":[]}}},{"type":"class","id":"ember-data-base-model/serializers/-base~BaseSerializer","attributes":{"name":"BaseSerializer","file":"ember-data-base-model/serializers/-base","description":"<div class=\"docs-md\"><p>This is a convenience <code>JSONAPISerializer</code> that will ensure that both the\n<code>createdAt</code> and <code>updatedAt</code> fields aren&#39;t serialized and pushed into the payload\nfor <code>POST</code>, <code>PATCH</code>, <code>PUT</code> operations.  There should be absolutely no reason\nto pass these fields to your Rails API as it generates these values automatically.</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\"><span class=\"hljs-comment\">// app/serializers/application.js</span>\n<span class=\"hljs-keyword\">import</span> BaseSerializer <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'ember-data-base-model/serializers/-base'</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> BaseSerializer.extend({\n   <span class=\"hljs-comment\">// ... your serializer overrides ...</span>\n});</code></pre></div>","lineNumber":7,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[{"name":"attrs","file":"ember-data-base-model/serializers/-base","description":"<div class=\"docs-md\"><p>The <code>attrs</code> object can be used to declare a simple mapping between property names on\n<code>DS.Model</code> records and payload keys in the serialized JSON object representing the\nrecord. An object with the property key can also be used to designate the attribute&#39;s\n<code>key</code> on the response payload.</p>\n<p>Setting <code>serialize</code> to <code>true</code> enforces serialization for hasMany relationships even if\nit&#39;s neither a many-to-many nor many-to-none relationship.</p>\n<p>In this case we&#39;re merging in the following into <code>attrs</code>:</p>\n<pre class=\"docs-md__code\"><code class=\"undefinedjavascript\">{\n   <span class=\"hljs-attr\">createdAt</span>: { <span class=\"hljs-attr\">serialize</span>: <span class=\"hljs-literal\">false</span> },\n   <span class=\"hljs-attr\">updatedAt</span>: { <span class=\"hljs-attr\">serialize</span>: <span class=\"hljs-literal\">false</span> }\n}</code></pre></div>","lineNumber":27,"access":"public","tags":[],"type":"Object","isStatic":false,"decorators":[]}],"methods":[],"accessors":[],"parentClassId":"DS.JSONAPISerializer"},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-base-model/serializers/-base","attributes":{"file":"ember-data-base-model/serializers/-base","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-data-base-model/serializers/-base~BaseSerializer"}]},"components":{"data":[]}}}]}
