{"jsonapi":{"version":"1.0"},"data":{"type":"project","id":"ember-data-base-model","attributes":{"name":"ember-data-base-model","version":"1.0.0-rc.1","navigationIndex":[{"type":"models","items":[{"id":"ember-data-base-model/models/-base","path":"models/-base","name":"Base"}]}]},"relationships":{"modules":{"data":[{"type":"module","id":"ember-data-base-model/models/-base"}]}}},"included":[{"type":"class","id":"ember-data-base-model/models/-base~Base","attributes":{"name":"Base","file":"ember-data-base-model/models/-base","lineNumber":8,"access":"public","tags":[],"isInterface":false,"exportType":"default","decorators":[],"fields":[{"name":"createdAt","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you have a Rails app and use timestamps in your table creation migrations, you&#39;ll have a <code>created_at</code>\nattribute on most if not all of your models.</p></div>","lineNumber":17,"access":"public","tags":[],"type":"Date","isStatic":false,"decorators":[]},{"name":"updatedAt","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you have a Rails app and use timestamps in your table creation migrations, you&#39;ll have a <code>updated_at</code>\nattribute on most if not all of your models.</p></div>","lineNumber":26,"access":"public","tags":[],"type":"Date","isStatic":false,"decorators":[]}],"methods":[{"name":"becomeDirty","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Force the model&#39;s state to dirty.</p>\n<p>You could use this function after you&#39;ve edited a model&#39;s relationships so that your Ember application\nknows that the model may need to be saved.</p></div>","lineNumber":179,"access":"public","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"transitionToInFlight","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you&#39;re manually saving a model, you could borrow this helper function to make sure the\nmodel is marked as dirty and it&#39;s transitioned to <code>inFlight</code>.</p>\n<p>This method depends on accessing the <code>_internalModel</code> field.</p></div>","lineNumber":192,"access":"public","tags":[],"returns":null,"params":[],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"transitionToSaved","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you&#39;re manually saving a model, you could borrow this helper function to make sure the\nmodel is marked as saved and supplied payload is pushed into the store.</p>\n<p>This method depends on accessing the <code>_internalModel</code> field.</p></div>","lineNumber":205,"access":"public","tags":[],"returns":null,"params":[{"name":"payload","type":"object","description":"the API server payload that will be pushed into the Ember Data `store`"}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]},{"name":"transitionToUncommitted","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>If you&#39;re manually saving a model, you can borrow this helper method in your error/catch block\nto transition the model to <code>uncommitted</code> and process all of the payload errors.</p>\n<p>This method depends on accessing the <code>_internalModel</code> field.</p></div>","lineNumber":219,"access":"public","tags":[],"returns":null,"params":[{"name":"payload","type":"object","description":"the API server payload that includes the error messages that will be appended\nto the model's `errors` collection."}],"isAsync":false,"isGenerator":false,"isStatic":false,"decorators":[]}],"accessors":[{"name":"altered?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isAltered</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":37,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isAltered` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"clean?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isClean</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":51,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isClean` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"dirty?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isDirty</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":65,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isDirty` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isAltered","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Returns <code>true</code> if the instance has been altered since creation; <code>false</code> otherwise.</p>\n<p>Has the model has been altered since creation?  Determined by comparing the <code>createdAt</code> timestamp\nagainst the <code>updatedAt</code> timestamp.</p></div>","lineNumber":79,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isClean","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the model has not had any of its attributes edited; <code>false</code> otherwise.</p>\n<p>Negation of the model&#39;s <code>hasDirtyAttributes</code> property.</p></div>","lineNumber":94,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isDirty","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the model is dirty and at least one attribute has been edited; <code>false</code> otherwise.</p>\n<p>Read-only peek at the model&#39;s <code>hasDirtyAttributes</code> property.</p></div>","lineNumber":104,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isPersisted","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the instance has been persisted to the store; <code>false</code> otherwise.</p>\n<p>Negation of the <code>isNew</code> property, meaning that the model has been persisted permanently to the store.</p></div>","lineNumber":114,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"isUnaltered","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Return <code>true</code> if the instance is unchanged since creation; <code>false</code> otherwise.</p>\n<p>Is the model unchanged since creation?  Basically the negation of <code>isAltered</code>.</p></div>","lineNumber":124,"access":"public","tags":[],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"new?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use Ember Data <code>isNew</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":134,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isNew` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"persisted?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isPersisted</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":148,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isPersisted` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false},{"name":"unaltered?","file":"ember-data-base-model/models/-base","description":"<div class=\"docs-md\"><p>Deprecated, use <code>isUnaltered</code> instead.  Going away in Ember-Data-4.0.</p>\n<p>See: https://github.com/cybertooth-io/ember-data-base-model/issues/11</p></div>","lineNumber":162,"access":"public","tags":[{"name":"deprecated","value":true},{"name":"deprecationMessage","value":"use `isUnaltered` instead because question marks in property names is not sustainable"}],"type":"boolean","isStatic":false,"decorators":[],"hasGetter":true,"hasSetter":false}],"parentClassId":null},"relationships":{"parentClass":{"data":null}}},{"type":"module","id":"ember-data-base-model/models/-base","attributes":{"file":"ember-data-base-model/models/-base","functions":[],"variables":[]},"relationships":{"classes":{"data":[{"type":"class","id":"ember-data-base-model/models/-base~Base"}]},"components":{"data":[]}}}]}
